LP2 


IS

#####1) ) Write Java/Python/C++ code to accept a string from the User. Perform bit-wise AND and
XOR each character in the string with 127 and display the results. #####


#Subs_Cipher.java

public class Subs_Cipher {
public static void main(String[] args) {
String str = "HelloWorld";
StringBuilder andResult = new StringBuilder();
StringBuilder xorResult = new StringBuilder();
for (char c : str.toCharArray()) {
// Perform AND operation
char andChar = (char) (c & 127);
andResult.append(andChar);
// Perform XOR operation
char xorChar = (char) (c ^ 127);
xorResult.append(xorChar);
}
// Display results
System.out.println("XOR Result: " + xorResult.toString());
System.out.println("Original String: " + str);
System.out.println("AND Result: " + andResult.toString());
}
}



##### 2) 
// Write a Java/C/C++/Python program to perform encryption and
//  decryption using the method of the method of Transposition technique.


public class AssingmentNo2 {
    
    // Encryption function
    public static String encrypt(String plaintext, int key) {
        String ciphertext = "";
        char[][] transpositionGrid = new char[key][plaintext.length()/key+1];
        int index = 0;
        
        // Fill the transposition grid column by column
        for(int j = 0; j < transpositionGrid[0].length; j++) {
            for(int i = 0; i < key && index < plaintext.length(); i++) {
                transpositionGrid[i][j] = plaintext.charAt(index++);
            }
        }
        
        // Read the ciphertext row by row
        for(int i = 0; i < key; i++) {
            for(int j = 0; j < transpositionGrid[0].length; j++) {
                if(transpositionGrid[i][j] != '\u0000') {
                    ciphertext += transpositionGrid[i][j];
                }
            }
        }
        return ciphertext;
    }
    
    // Decryption function
    public static String decrypt(String ciphertext, int key) {
        String plaintext = "";
        char[][] transpositionGrid = new char[key][ciphertext.length()/key+1];
        int index = 0;
        
        // Fill the transposition grid row by row
        for(int i = 0; i < key; i++) {
            for(int j = 0; j < transpositionGrid[0].length && index < ciphertext.length(); j++) {
                transpositionGrid[i][j] = ciphertext.charAt(index++);
            }
        }
        
        // Read the plaintext column by column
        for(int j = 0; j < transpositionGrid[0].length; j++) {
            for(int i = 0; i < key; i++) {
                if(transpositionGrid[i][j] != '\u0000') {
                    plaintext += transpositionGrid[i][j];
                }
            }
        }
        return plaintext;
    }
    
    // Main function to test the program
    public static void main(String[] args) {
        String plaintext = "Hello World";
        int key = 4;
        
        System.out.println("Plaintext: " + plaintext);
        
        // Encrypt the plaintext
        String ciphertext = encrypt(plaintext, key);
        System.out.println("Ciphertext: " + ciphertext);
        
        // Decrypt the ciphertext
        String decryptedText = decrypt(ciphertext, key);
        System.out.println("Decrypted text: " + decryptedText);
    }
}




##### 3) Write Java/Python/C++ code to implement DES Encryption Algorithm.   #####



#DesEncryption.java






import java.util.*;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.security.SecureRandom;
public class DesEncryption {
public static void main(String[] args) throws Exception {
// Generate a secret key for DES algorithm
KeyGenerator keyGenerator = KeyGenerator.getInstance("DES");
SecureRandom secureRandom = new SecureRandom();
keyGenerator.init(secureRandom);
SecretKey secretKey = keyGenerator.generateKey();
// Convert the secret key to bytes
byte[] keyBytes = secretKey.getEncoded();
// Create a SecretKeySpec object from the key bytes
SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, "DES");
// Create a Cipher object and initialize it with the secret key
Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
// Encrypt the message
Scanner sc = new Scanner(System.in);
System.out.println("Enter the plaintext");
String message = sc.nextLine();
byte[] encryptedMessageBytes = cipher.doFinal(message.getBytes());
// Print the encrypted message
System.out.println("Encrypted Message: " + new String(encryptedMessageBytes));
// Initialize the Cipher object for decryption
cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);
// Decrypt the message
byte[] decryptedMessageBytes = cipher.doFinal(encryptedMessageBytes);
// Print the decrypted message
System.out.println("Decrypted Message: " + new String(decryptedMessageBytes));
}
}
*****************************************************************************
// Write a Java/C/C++/Python program to implement DES algorithm.
import java.util.Arrays;

public class DES {
    public static void main(String[] args) {
        // Input block of 64 bits
        byte[] inputBlock = {
            (byte)0x12, (byte)0x34, (byte)0x56, (byte)0x78,
            (byte)0x9a, (byte)0xbc, (byte)0xde, (byte)0xf0
        };

        // Initial permutation table
        int[] ipTable = {
            58, 50, 42, 34, 26, 18, 10, 2,
            60, 52, 44, 36, 28, 20, 12, 4,
            62, 54, 46, 38, 30, 22, 14, 6,
            64, 56, 48, 40, 32, 24, 16, 8,
            57, 49, 41, 33, 25, 17, 9, 1,
            59, 51, 43, 35, 27, 19, 11, 3,
            61, 53, 45, 37, 29, 21, 13, 5,
            63, 55, 47, 39, 31, 23, 15, 7
        };

        // Apply initial permutation to input block
        byte[] permutedBlock = new byte[8];
        for (int i = 0; i < ipTable.length; i++) {
            int bitPosition = 7 - i % 8;
            int bytePosition = i / 8;
            int inputBit = (inputBlock[ipTable[i] / 8] >> (7 - ipTable[i] % 8)) & 1;
            permutedBlock[bytePosition] |= inputBit << bitPosition;
        }

        System.out.println("Input block: " + Arrays.toString(inputBlock));
        System.out.println("Permuted block: " + Arrays.toString(permutedBlock));
    }
}
******************************************************************************





##### 4) Write Java/Python/C++ code to implement AES Encryption Algorithm.   #####
********************************************************************
import java.security.Key;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class AES {
    private static final String ALGORITHM = "AES";
    private static final String KEY = "mysecretkey12345";

    public static void main(String[] args) {
        String originalString = "Hello, world!";
        System.out.println("Original string: " + originalString);

        try {
            // Encrypt the string
            String encryptedString = encrypt(originalString, KEY);
            System.out.println("Encrypted string: " + encryptedString);

            // Decrypt the string
            String decryptedString = decrypt(encryptedString, KEY);
            System.out.println("Decrypted string: " + decryptedString);
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    public static String encrypt(String value, String key) throws Exception {
        Key aesKey = new SecretKeySpec(key.getBytes(), ALGORITHM);
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.ENCRYPT_MODE, aesKey);
        byte[] encrypted = cipher.doFinal(value.getBytes());
        return Base64.getEncoder().encodeToString(encrypted);
    }

    public static String decrypt(String value, String key) throws Exception {
        Key aesKey = new SecretKeySpec(key.getBytes(), ALGORITHM);
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, aesKey);
        byte[] decrypted = cipher.doFinal(Base64.getDecoder().decode(value));
        return new String(decrypted);
    }
}
***************************************************************************************

#AESExample.java


import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
public class AESExample {
private static final String AES_ALGORITHM = "AES";
private static final int KEY_LENGTH = 128;
public static String encrypt(String plaintext, String secretKey) throws Exception {
byte[] keyBytes = fixKeyLength(secretKey.getBytes(StandardCharsets.UTF_8));
SecretKeySpec keySpec = new SecretKeySpec(keyBytes, AES_ALGORITHM);
Cipher cipher = Cipher.getInstance(AES_ALGORITHM);
cipher.init(Cipher.ENCRYPT_MODE, keySpec);
byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes(StandardCharsets.UTF_8));
return Base64.getEncoder().encodeToString(encryptedBytes);
}
public static String decrypt(String ciphertext, String secretKey) throws Exception {
byte[] keyBytes = fixKeyLength(secretKey.getBytes(StandardCharsets.UTF_8));
SecretKeySpec keySpec = new SecretKeySpec(keyBytes, AES_ALGORITHM);
Cipher cipher = Cipher.getInstance(AES_ALGORITHM);
cipher.init(Cipher.DECRYPT_MODE, keySpec);
byte[] decodedBytes = Base64.getDecoder().decode(ciphertext);
byte[] decryptedBytes = cipher.doFinal(decodedBytes);
return new String(decryptedBytes, StandardCharsets.UTF_8);
}
private static byte[] fixKeyLength(byte[] keyBytes) {
int validLength = (KEY_LENGTH / 8);
if (keyBytes.length == validLength) {
return keyBytes;
} else if (keyBytes.length < validLength) {
byte[] newKeyBytes = new byte[validLength];
System.arraycopy(keyBytes, 0, newKeyBytes, 0, keyBytes.length);
return newKeyBytes;
} else {
byte[] newKeyBytes = new byte[validLength];
System.arraycopy(keyBytes, 0, newKeyBytes, 0, validLength);
return newKeyBytes;
}
}
public static void main(String[] args) {
try {
String plaintext = "Hello, world!";
String secretKey = "ThisIsASecretKey123";
String encryptedText = encrypt(plaintext, secretKey);
System.out.println("Encrypted: " + encryptedText);
String decryptedText = decrypt(encryptedText, secretKey);
System.out.println("Decrypted: " + decryptedText);
} catch (Exception e) {
e.printStackTrace();
}
}
}






##### 5) Write Java/Python/C++ code to implement RSA Encryption Algorithm. 


#RSAExample.java



***************************************************************
// Java Program to Implement the RSA Algorithm
import java.util.*;
import java.math.*;

class RSA {
	public static void main(String args[])
	{
		int p, q, n, z, d = 0, e, i;

		// The number to be encrypted and decrypted
		int msg = 12;
		double c;
		BigInteger msgback;

		// 1st prime number p
		p = 3;

		// 2nd prime number q
		q = 11;
		n = p * q;
		z = (p - 1) * (q - 1);
		System.out.println("the value of z = " + z);

		for (e = 2; e < z; e++) {

			// e is for public key exponent
			if (gcd(e, z) == 1) {
				break;
			}
		}
		System.out.println("the value of e = " + e);
		for (i = 0; i <= 9; i++) {
			int x = 1 + (i * z);

			// d is for private key exponent
			if (x % e == 0) {
				d = x / e;
				break;
			}
		}
		System.out.println("the value of d = " + d);
		c = (Math.pow(msg, e)) % n;
		System.out.println("Encrypted message is : " + c);

		// converting int value of n to BigInteger
		BigInteger N = BigInteger.valueOf(n);

		// converting float value of c to BigInteger
		BigInteger C = BigDecimal.valueOf(c).toBigInteger();
		msgback = (C.pow(d)).mod(N);
		System.out.println("Decrypted message is : "
						+ msgback);
	}

	static int gcd(int e, int z)
	{
		if (e == 0)
			return z;
		else
			return gcd(z % e, e);
	}
}
************************************************************************************
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Signature;
public class RSAExample {
public static KeyPair generateKeyPair() throws Exception {
SecureRandom secureRandom = new SecureRandom();
KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
keyPairGenerator.initialize(2048, secureRandom);
return keyPairGenerator.generateKeyPair();
}
public static byte[] sign(PrivateKey privateKey, byte[] data) throws Exception {
Signature signature = Signature.getInstance("SHA256withRSA");
signature.initSign(privateKey);
signature.update(data);
return signature.sign();
}
public static boolean verify(PublicKey publicKey, byte[] data, byte[] signatureBytes) throws
Exception {
Signature signature = Signature.getInstance("SHA256withRSA");
signature.initVerify(publicKey);
signature.update(data);
return signature.verify(signatureBytes);
}
public static void main(String[] args) {
try {
// Generate key pair
KeyPair keyPair = generateKeyPair();
PublicKey publicKey = keyPair.getPublic();
PrivateKey privateKey = keyPair.getPrivate();
// Original data
String originalData = "Hello, world!";
byte[] originalDataBytes = originalData.getBytes();
// Sign the data with the private key
byte[] signatureBytes = sign(privateKey, originalDataBytes);
// Verify the signature using the public key
boolean isVerified = verify(publicKey, originalDataBytes, signatureBytes);
System.out.println("Original Data: " + originalData);
System.out.println("Signature Verified: " + isVerified);
} catch (Exception e) {
e.printStackTrace();
}
}
}


**********************************************************************************************************
##### 6) Write code to Hellman Key Exchange mechanism and establish a secret key among 2 parties.




#Diffie-Hellman.html



<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Document</title>
</head>
<body>
<script>
// This program calculates the Key for two persons
// using the Diffie-Hellman Key exchange algorithm
// Power function to return value of a ^ b mod P
function power(a, b, p)
{
if (b == 1)
return a;
else
return((Math.pow(a, b)) % p);
}
// Driver code
var P, G, x, a, y, b, ka, kb;
// Both the persons will be agreed upon the
// public keys G and P
// A prime number P is taken
P = 23;
document.write("The value of P:" + P + "<br>");
// A primitive root for P, G is taken
G = 9;
document.write("The value of G:" + G + "<br>");
// Alice will choose the private key a
// a is the chosen private key
a = 4;
document.write("The private key a for Alice:" +
a + "<br>");
// Gets the generated key
x = power(G, a, P);
// Bob will choose the private key b
// b is the chosen private key
b = 3;
document.write("The private key b for Bob:" +
b + "<br>");
// Gets the generated key
y = power(G, b, P);
// Generating the secret key after the exchange
// of keys
ka = power(y, a, P); // Secret key for Alice
kb = power(x, b, P); // Secret key for Bob
document.write("Secret key for the Alice is:" +
ka + "<br>");
document.write("Secret key for the Bob is:" +
kb + "<br>");
</script>
</body>
</html>




#### 7) Write a program to Calculate the message digest of a text using the MD5 algorithm.  #####


# MD5Example.java

***************************************************************
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class MD5 {
    public static void main(String[] args) {
        String text = "example text";
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] messageDigest = md.digest(text.getBytes());

            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                String hex = Integer.toHexString(0xff & messageDigest[i]);
                if(hex.length() == 1) hexString.append('0');
                hexString.append(hex);
            }
            System.out.println("Message Digest: " + hexString.toString());
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
}
***************************************************************************

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
public class MD5Example {
public static String calculateMD5(String text) throws NoSuchAlgorithmException {
// Create an instance of MessageDigest with MD5 algorithm
MessageDigest md = MessageDigest.getInstance("MD5");
// Convert the text to bytes and update the digest
md.update(text.getBytes());
// Get the digest bytes
byte[] digest = md.digest();
// Convert the digest bytes to a hexadecimal string representation
StringBuilder hexString = new StringBuilder();
for (byte b : digest) {
String hex = Integer.toHexString(0xFF & b);
if (hex.length() == 1) {
// Pad single digit hex values with leading zero
hexString.append('0');
}
hexString.append(hex);
}
return hexString.toString();
}
public static void main(String[] args) {
try {
String text = "Hello, world!";
String md5Digest = calculateMD5(text);
System.out.println("Text: " + text);
System.out.println("MD5 Digest: " + md5Digest);
} catch (NoSuchAlgorithmException e) {
e.printStackTrace();
}
}
}
